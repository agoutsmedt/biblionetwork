Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
# using the standard fractionnal counting method
coauth2 <- coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")]
coauth1 <- coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")]
sum(unique(coauth1[, c("Source","Target","weight")])$weight)
sum(unique(coauth2[, c("Source","Target","weight")])$weight)
coauth2
coauth1
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
# using the standard fractionnal counting method
coauth2 <- coauth
coauth2 <- coauth2[, weight := sum(1/(nb_auth-1)), c("Source","Target")]
coauth1 <- coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")]
sum(unique(coauth2[, c("Source","Target","weight")])$weight)
coauth2
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
coauth
# using the standard fractionnal counting method
coauth2 <- coauth
coauth2
coauth2 <- coauth2[, weight := sum(1/(nb_auth-1)), c("Source","Target")]
coauth2
coauth2
coauth1 <- coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")]
coauth1
coauth1
coauth2
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
# using the standard fractionnal counting method
coauth2 <- coauth
coauth2 <- coauth2[, weight := sum(1/(nb_auth-1)), c("Source","Target")]
coauth2
coauth2
sum(unique(coauth2[, c("Source","Target","weight")])$weight)
coauth1 <- coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")]
coauth1
coauth1
sum(unique(coauth1[, c("Source","Target","weight")])$weight)
length(unique(coauth$articles))
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,.N,by=list(Target,Source)]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,.N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
coauth
method = "full_counting"
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method = "full_counting"){
coauth <- unique(coauth[, weight := N])
}else { if(method = "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")])
}else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")])
}
}
if(method = "full_counting"){
coauth <- unique(coauth[, weight := N])
} else { if(method = "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")])
}
}
coauth <- unique(coauth[, weight := N])
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
method = "fractional_couting"
if(method = "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method = "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth
method = "full_counting"
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth
method = "fractional_counting"
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# Calculating a "share" of contribution depending on the number of author
nb_art <-  dt[, nb_art := .N, by = "articles"]
nb_art
nb_art
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# Calculating a "share" of contribution depending on the number of author
nb_art <-  dt[, nb_art := .N, by = "authors"]
nb_art
nb_art
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth <-  merge(coauth, nb_art, by.x = "Target",by.y = "authors" )
data.table::setnames(coauth,"nb_art", "nb_art_Target")
coauth <-  merge(coauth, nb_art, by.x = "Source",by.y = "authors" )
data.table::setnames(coauth,"nb_art", "nb_art_Source")
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# Calculating a "share" of contribution depending on the number of author
nb_art <-  dt[, nb_art := .N, by = "authors"]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth <-  merge(coauth, unique(nb_art[,c("authors","nb_art")]), by.x = "Target",by.y = "authors" )
data.table::setnames(coauth,"nb_art", "nb_art_Target")
coauth <-  merge(coauth, unique(nb_art[,c("authors","nb_art")]), by.x = "Source",by.y = "authors" )
data.table::setnames(coauth,"nb_art", "nb_art_Source")
coauth
coauth[,weight := weight/sqrt(nb_art_Target*nb_art_Source)]
coauth
document()
document()
document()

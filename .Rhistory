dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
method = "fractional_couting"
if(method = "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method = "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth
method = "full_counting"
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth
method = "fractional_counting"
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# Calculating a "share" of contribution depending on the number of author
nb_art <-  dt[, nb_art := .N, by = "articles"]
nb_art
nb_art
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# Calculating a "share" of contribution depending on the number of author
nb_art <-  dt[, nb_art := .N, by = "authors"]
nb_art
nb_art
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth <-  merge(coauth, nb_art, by.x = "Target",by.y = "authors" )
data.table::setnames(coauth,"nb_art", "nb_art_Target")
coauth <-  merge(coauth, nb_art, by.x = "Source",by.y = "authors" )
data.table::setnames(coauth,"nb_art", "nb_art_Source")
coauth
# Making sure the table is a datatable
dt <- data.table::data.table(Authors_stagflation)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
dt <- dt[,c("authors","articles")]
data.table::setkey(dt,authors,articles)
# removing duplicated citations with exactly the same source and target
dt <- unique(dt)
# Removing articles with only one author:
dt <- dt[,nb_auth := .N, by = articles][nb_auth > 1]
# Calculating a "share" of contribution depending on the number of author
nb_art <-  dt[, nb_art := .N, by = "authors"]
# copying the file for later
dt_reduce <- dt[,c("authors","articles")]
#Creating every combinaison of articles per references
coauth <- dt_reduce[,list(Target = rep(authors[1:(length(authors)-1)],(length(authors)-1):1),
Source = rev(authors)[sequence((length(authors)-1):1)]),
by= articles]
# remove loop
coauth <- coauth[Source!=Target]
#Calculating the links between authors with the full counting method
coauth <- coauth[,N := .N, by=c("Source","Target")]
# We merge with the number of authors per article
coauth <-  merge(coauth, unique(dt[,c("articles","nb_auth")]), by = "articles" )
if(method == "full_counting"){
coauth <- unique(coauth[, weight := N][,c("Source","Target","weight")])
} else { if(method == "fractional_counting"){
coauth <- unique(coauth[, weight := sum(1/(nb_auth-1)), c("Source","Target")][,c("Source","Target","weight")])
} else {
coauth <- unique(coauth[, weight := sum(2/(nb_auth*(nb_auth-1))), c("Source","Target")][,c("Source","Target","weight")])
}
}
coauth <-  merge(coauth, unique(nb_art[,c("authors","nb_art")]), by.x = "Target",by.y = "authors" )
data.table::setnames(coauth,"nb_art", "nb_art_Target")
coauth <-  merge(coauth, unique(nb_art[,c("authors","nb_art")]), by.x = "Source",by.y = "authors" )
data.table::setnames(coauth,"nb_art", "nb_art_Source")
coauth
coauth[,weight := weight/sqrt(nb_art_Target*nb_art_Source)]
coauth
document()
document()
document()
library(devtools)
document()
check()
document()
check()
check()
check()
check()
load_all()
coauth_network(Authors_stagflation,"Author","ItemID_Ref", method = "fractional_counting", cosine_normalized = TRUE)
x = coauth_network(Authors_stagflation,"Author","ItemID_Ref", method = "fractional_counting", cosine_normalized = TRUE)
# Renaming and simplifying
data.table::setnames(dt, c(authors,articles), c("authors", "articles"))
load("~/MEGA/Research/R/Packages/biblionetwork/data/Authors_stagflation.rda")
View(Authors_stagflation)
x = coauth_network(Authors_stagflation,"Author","ItemID_Ref", method = "fractional_counting", cosine_normalized = TRUE)
load_all()
x = coauth_network(Authors_stagflation,"Author","ItemID_Ref", method = "fractional_counting", cosine_normalized = TRUE)
View(x)
load_all()
x = coauth_network(Authors_stagflation,"Author","ItemID_Ref", method = "fractional_counting", cosine_normalized = TRUE)
View(x)
load_all()
x = coauth_network(Authors_stagflation,"Author","ItemID_Ref", method = "fractional_counting", cosine_normalized = TRUE)
View(x)
View(x)
load_all()
x = coauth_network(Authors_stagflation,"Author","ItemID_Ref", method = "fractional_counting", cosine_normalized = TRUE)
View(x)
coupling_similarity(Ref_)
coupling_similarity(Ref_Stagflation,"Citing_ItemID_Ref","ItemID_Ref")
coupling_similarity(Ref_stagflation,"Citing_ItemID_Ref","ItemID_Ref")
x = coupling_similarity(Ref_stagflation,"Citing_ItemID_Ref","ItemID_Ref")
View(x)
document()
?coupling_similarity
document()
?coupling_similarity
document()
document()
?coupling_similarity
document()
?coupling_similarity
document()
?coupling_similarity
?coauth_network
?biblio_coupling
?coupling_strength
library(Rdpack)
document()
?coupling_strength
?biblio_coupling
document()
load_all()
?biblio_coupling
library(roxygen2)
document()
load_all()
?biblio_coupling
install()
library(biblionetwork)
?biblio_coupling
?coupling_similarity
?coauth_network
library(biblionetwork)
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "full counting")
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "fractional counting")
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "fractional counting", cosine_normalized = TRUE)
library(biblionetwork)
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "full counting")
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "fractional counting")
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "fractional counting", cosine_normalized = TRUE)
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "full counting")
x = coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "full counting")
x
load_all()
install()
library(biblionetwork)
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "full counting")
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "fractional counting")
coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "fractional counting", cosine_normalized = TRUE)
head(coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "full counting"),10)
full_counting <- coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "full_counting")
head(full_counting[order(Source)],10)
library(biblionetwork)
full_counting <- coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "full_counting")
head(full_counting[order(Source)],10)
fractional_counting <- coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "fractional_counting")
head(fractional_couting[order(Source)],10)
library(biblionetwork)
full_counting <- coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "full_counting")
head(full_counting[order(Source)],10)
fractional_counting <- coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "fractional_counting")
head(fractional_counting[order(Source)],10)
fractional_counting_cosine <- coauth_network(Authors_stagflation, authors = "Author", articles = "ItemID_Ref", method = "fractional_counting", cosine_normalized = TRUE)
head(fractional_counting_cosine[order(Source)],10)
build_readme()
library(biblionetwork)
biblio_coupling(Ref_stagflation, source = "ItemID_Ref", ref = "Citing_ItemID_Ref")
biblio_cocitation(Ref_stagflation, source = "Citing_ItemID_Ref", ref = "ItemID_Ref")
build_readme()
build_manual()
build_manual(path = "./biblionetwork/")
document()
document()
document()
document()
build_manual(path = "./biblionetwork")
build_manual()
load_all()
install()
build_manual()
check()
document()
document()
build_manual()
build_manual()
?biblio_coupling
document()
install()
build_manual()
document()
check()
isntall()
install()
build_manual()
library(devtools)
document()
build_manual()
document()
build_manual()
document()
build_manual()
document()
build_manual()
install()
library(devtools)
use_github()
usethis::use_git_remote("orign", overwrite = TRUE)
usethis::use_git_remote("orign", url = 'https://github.com/agoutsmedt/biblionetwork', overwrite = TRUE)
use_github()
browseVignettes("pkgdown")
install.packages("pkgdown")
browseVignettes("pkgdown")
usethis::use_vignette("Using biblionetwork")
usethis::use_vignette("Using_biblionetwork")
styler::tidyverse_style()
citation("data.table")
citation("biblionetwork")
citation("biblionetwork")
library(devtools)
document()
load_all()
install()
install()
install()
install()
library(devtools)
install()
document()
install()
document()
install()
document()
install()
build_readme()
check()
load("~/MEGA/Research/R/Packages/biblionetwork/data/Nodes_stagflation.rda")
View(Nodes_stagflation)
Nodes_stagflation <- Nodes_stagflation[, Title:= toupper("Title")]
Nodes_stagflation <- Nodes_stagflation[, Title := toupper(Title)]
library(data.table)
Nodes_stagflation <- Nodes_stagflation[, Title := toupper(Title)]
library(data.table)
Nodes_stagflation <- Nodes_stagflation[, Title := toupper(Title)]
Nodes_stagflation <- as.data.table(Nodes_stagflation)
Nodes_stagflation <- Nodes_stagflation[, Title := toupper(Title)]
library(stringr)
browseVignettes("stringr")
str_replace_all(Nodes_stagflation$Title, "<96>","-")
Ref_stagflation
load("~/MEGA/Research/R/Packages/biblionetwork/data/Ref_stagflation.rda")
View(Ref_stagflation)
Ref_stagflation <- as.data.table(Ref_stagflation)
Ref_stagflation <- Ref_stagflation[, `:=` (Title = toupper(Title), Author = toupper(Author))]
Ref_stagflation
Ref_stagflation
Ref_stagflation$Author
check()
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<96>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><80><93>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><88><92>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><80><94>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><80><98>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><80><94>","-")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<c3><ad>","I")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<c3><ae>","I")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<c4><b1><c2><b4>","I")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<c3><a7>","C")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<96>","-")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<96>","-")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<96>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<96>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><93>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><88><92>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><94>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><98>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><94>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<c2><ae>","FF")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<c3><87>","C")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><9c>","'")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><9d>","'")
saveRDS(Nodes_stagflation,".\data\Nodes_stagflation.rda")
saveRDS(Nodes_stagflation,"\data\Nodes_stagflation.rda")
saveRDS(Nodes_stagflation,"data\Nodes_stagflation.rda")
saveRDS(Nodes_stagflation,"data/Nodes_stagflation.rda")
saveRDS(Ref_stagflation,"data/Ref_stagflation.rda")
check()
saveRDA(Nodes_stagflation,"data/Nodes_stagflation.rda")
save(Nodes_stagflation,"data/Nodes_stagflation.rda")
load("~/MEGA/Research/R/Packages/biblionetwork/data/Nodes_stagflation.rda")
load("~/MEGA/Research/R/Packages/biblionetwork/data/Nodes_stagflation.rda")
load("~/MEGA/Research/R/Packages/biblionetwork/data/Ref_stagflation.rda")
library(data.table)
Nodes_stagflation <- as.data.table(Nodes_stagflation)
Nodes_stagflation <- Nodes_stagflation[, Title := toupper(Title)]
Ref_stagflation <- as.data.table(Ref_stagflation)
Ref_stagflation <- Ref_stagflation[, `:=` (Title = toupper(Title), Author = toupper(Author))]
library(stringr)
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<96>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><80><93>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><88><92>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><80><94>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><80><98>","-")
Nodes_stagflation$Title <- str_replace_all(Nodes_stagflation$Title, "<e2><80><94>","-")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<c3><ad>","I")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<c3><ae>","I")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<c4><b1><c2><b4>","I")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<c3><a7>","C")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<96>","-")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<96>","-")
Ref_stagflation$Author <- str_replace_all(Ref_stagflation$Author, "<96>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<96>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><93>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><88><92>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><94>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><98>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><94>","-")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<c2><ae>","FF")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<c3><87>","C")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><9c>","'")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<e2><80><9d>","'")
save(Nodes_stagflation,"data/Nodes_stagflation.rda")
save(Ref_stagflation,"data/Ref_stagflation.rda")
Nodes_stagflation
Ref_stagflation <- Ref_stagflation[, `:=` (Title = toupper(Title), Author = toupper(Author), Journal = toupper(Journal))]
Nodes_stagflation <- Nodes_stagflation[, `:=` (Title := toupper(Title), Journal = toupper(Journal))]
Nodes_stagflation <- Nodes_stagflation[, `:=` (Title = toupper(Title), Journal = toupper(Journal))]
use_data(Nodes_stagflation)
use_data(Nodes_stagflation, overwrite = TRUE)
use_data(Ref_stagflation, overwrite = TRUE)
check()
load("~/MEGA/Research/R/Packages/biblionetwork/data/Ref_stagflation.rda")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<c2><80><8c>","'")
Ref_stagflation$Title <- str_replace_all(Ref_stagflation$Title, "<c2><80><9d>","'")
use_data(Ref_stagflation, overwrite = TRUE)
check()
Ref_stagflation$Journal
check()
Ref_stagflation$Journal <- str_replace_all(Ref_stagflation$Journal, "<c2><80><8c>MEASURING MONETARY POLICY<c2><80><9d> ","'")
Ref_stagflation$Journal <- str_replace_all(Ref_stagflation$Journal, "EVIDENCE AND SOME THEORY<c2><80><9d> ","")
Ref_stagflation$Journal
Ref_stagflation$Journal <- str_replace_all(Ref_stagflation$Journal, "<c2><80><8c>MEASURING MONETARY POLICY<c2><80><9d>","")
Ref_stagflation$Journal <- str_replace_all(Ref_stagflation$Journal, "EVIDENCE AND SOME THEORY<c2><80><9d> ","")
Ref_stagflation$Journal <- str_replace_all(Ref_stagflation$Journal, "EVIDENCE AND SOME THEORY<c2><80><9d>","")
Ref_stagflation$Journal
Ref_stagflation$Journal <- str_replace_all(Ref_stagflation$Journal, "EVIDENCE AND SOME THEORYÂ€\u009d ","")
Ref_stagflation$Journal
Ref_stagflation$Journal <- str_replace_all(Ref_stagflation$Journal, "Â€ŒMEASURING MONETARY POLICYÂ€\u009d ","")
Ref_stagflation$Journal
use_data(Ref_stagflation, overwrite = TRUE)
check()
install()
use_data_raw()
